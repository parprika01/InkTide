//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Scenes/Game/Events/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""7f3345d2-c144-4b61-b480-37e67272fff4"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""df8821d6-bb83-4032-bba0-2f66399b937f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""look"",
                    ""type"": ""Value"",
                    ""id"": ""0caa6e94-aa4e-45ee-8ccf-ff063d3ca577"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""padLook"",
                    ""type"": ""Value"",
                    ""id"": ""4c8f7d3f-72c0-48e0-a131-d995a06c3bb7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""sub_weapon"",
                    ""type"": ""Button"",
                    ""id"": ""5aaeace9-e7b6-439a-8294-9e89ae59b6ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""special_weapon"",
                    ""type"": ""Button"",
                    ""id"": ""e4e45fce-cd29-4973-94d0-a6c0fe64bddc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""nice"",
                    ""type"": ""Button"",
                    ""id"": ""5f670813-1af6-4b04-a202-dd3d8f794059"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""come_on"",
                    ""type"": ""Button"",
                    ""id"": ""43825254-d521-4358-9049-7aea36a9487b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""fire"",
                    ""type"": ""Button"",
                    ""id"": ""517798bb-ff0e-4489-89c8-7ae8f20e259a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""4a1f8414-8f8e-4700-93ae-4ced42a6ee1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""squid"",
                    ""type"": ""Button"",
                    ""id"": ""57b189f2-ff18-406a-9826-ae9b84ead086"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""61f8f2da-df9a-4195-8fcc-49221d4f480c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bc61b8d0-69be-4b7f-93c5-5a69e4d4d651"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f758661-57e8-49d9-9f29-2ca5d0f6bb36"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e5dc57e-d56b-4a7c-8502-74d5976251ea"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b486316-d65b-434b-bf20-dbff5e1b876c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""11b26b72-518b-4004-a5da-7fe8e7ed0d7e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sub_weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7492c1ec-90c0-482e-bb03-9a020b8746ea"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""nice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51edcbfc-fcef-42fe-8d4d-57d65a69ca15"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""come_on"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d410108e-9cc6-4d69-8a57-691c2c02aacb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""special_weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9cfb959-e9da-4b58-a82e-b0b4311c423f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce114a6d-6d05-46c5-96a2-744345c7f78d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd1b6b4e-bb50-497d-bf67-872e87464917"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""padLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffdc372b-8740-4504-b364-1268b75cbd0e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4db2b456-5a15-4a0d-9abb-d7a2ae1091bc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""squid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""setting"",
            ""id"": ""2a428a10-df40-4e68-a277-b51d3a1766ee"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e50501a2-2443-41c6-b8b1-867a219c89ba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ebc155a1-42ce-48f1-89ca-04026b1cdab3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_move = m_player.FindAction("move", throwIfNotFound: true);
        m_player_look = m_player.FindAction("look", throwIfNotFound: true);
        m_player_padLook = m_player.FindAction("padLook", throwIfNotFound: true);
        m_player_sub_weapon = m_player.FindAction("sub_weapon", throwIfNotFound: true);
        m_player_special_weapon = m_player.FindAction("special_weapon", throwIfNotFound: true);
        m_player_nice = m_player.FindAction("nice", throwIfNotFound: true);
        m_player_come_on = m_player.FindAction("come_on", throwIfNotFound: true);
        m_player_fire = m_player.FindAction("fire", throwIfNotFound: true);
        m_player_jump = m_player.FindAction("jump", throwIfNotFound: true);
        m_player_squid = m_player.FindAction("squid", throwIfNotFound: true);
        // setting
        m_setting = asset.FindActionMap("setting", throwIfNotFound: true);
        m_setting_Newaction = m_setting.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_player_move;
    private readonly InputAction m_player_look;
    private readonly InputAction m_player_padLook;
    private readonly InputAction m_player_sub_weapon;
    private readonly InputAction m_player_special_weapon;
    private readonly InputAction m_player_nice;
    private readonly InputAction m_player_come_on;
    private readonly InputAction m_player_fire;
    private readonly InputAction m_player_jump;
    private readonly InputAction m_player_squid;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_player_move;
        public InputAction @look => m_Wrapper.m_player_look;
        public InputAction @padLook => m_Wrapper.m_player_padLook;
        public InputAction @sub_weapon => m_Wrapper.m_player_sub_weapon;
        public InputAction @special_weapon => m_Wrapper.m_player_special_weapon;
        public InputAction @nice => m_Wrapper.m_player_nice;
        public InputAction @come_on => m_Wrapper.m_player_come_on;
        public InputAction @fire => m_Wrapper.m_player_fire;
        public InputAction @jump => m_Wrapper.m_player_jump;
        public InputAction @squid => m_Wrapper.m_player_squid;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @look.started += instance.OnLook;
            @look.performed += instance.OnLook;
            @look.canceled += instance.OnLook;
            @padLook.started += instance.OnPadLook;
            @padLook.performed += instance.OnPadLook;
            @padLook.canceled += instance.OnPadLook;
            @sub_weapon.started += instance.OnSub_weapon;
            @sub_weapon.performed += instance.OnSub_weapon;
            @sub_weapon.canceled += instance.OnSub_weapon;
            @special_weapon.started += instance.OnSpecial_weapon;
            @special_weapon.performed += instance.OnSpecial_weapon;
            @special_weapon.canceled += instance.OnSpecial_weapon;
            @nice.started += instance.OnNice;
            @nice.performed += instance.OnNice;
            @nice.canceled += instance.OnNice;
            @come_on.started += instance.OnCome_on;
            @come_on.performed += instance.OnCome_on;
            @come_on.canceled += instance.OnCome_on;
            @fire.started += instance.OnFire;
            @fire.performed += instance.OnFire;
            @fire.canceled += instance.OnFire;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @squid.started += instance.OnSquid;
            @squid.performed += instance.OnSquid;
            @squid.canceled += instance.OnSquid;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @look.started -= instance.OnLook;
            @look.performed -= instance.OnLook;
            @look.canceled -= instance.OnLook;
            @padLook.started -= instance.OnPadLook;
            @padLook.performed -= instance.OnPadLook;
            @padLook.canceled -= instance.OnPadLook;
            @sub_weapon.started -= instance.OnSub_weapon;
            @sub_weapon.performed -= instance.OnSub_weapon;
            @sub_weapon.canceled -= instance.OnSub_weapon;
            @special_weapon.started -= instance.OnSpecial_weapon;
            @special_weapon.performed -= instance.OnSpecial_weapon;
            @special_weapon.canceled -= instance.OnSpecial_weapon;
            @nice.started -= instance.OnNice;
            @nice.performed -= instance.OnNice;
            @nice.canceled -= instance.OnNice;
            @come_on.started -= instance.OnCome_on;
            @come_on.performed -= instance.OnCome_on;
            @come_on.canceled -= instance.OnCome_on;
            @fire.started -= instance.OnFire;
            @fire.performed -= instance.OnFire;
            @fire.canceled -= instance.OnFire;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @squid.started -= instance.OnSquid;
            @squid.performed -= instance.OnSquid;
            @squid.canceled -= instance.OnSquid;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @player => new PlayerActions(this);

    // setting
    private readonly InputActionMap m_setting;
    private List<ISettingActions> m_SettingActionsCallbackInterfaces = new List<ISettingActions>();
    private readonly InputAction m_setting_Newaction;
    public struct SettingActions
    {
        private @PlayerInput m_Wrapper;
        public SettingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_setting_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_setting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SettingActions set) { return set.Get(); }
        public void AddCallbacks(ISettingActions instance)
        {
            if (instance == null || m_Wrapper.m_SettingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SettingActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ISettingActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ISettingActions instance)
        {
            if (m_Wrapper.m_SettingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISettingActions instance)
        {
            foreach (var item in m_Wrapper.m_SettingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SettingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SettingActions @setting => new SettingActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnPadLook(InputAction.CallbackContext context);
        void OnSub_weapon(InputAction.CallbackContext context);
        void OnSpecial_weapon(InputAction.CallbackContext context);
        void OnNice(InputAction.CallbackContext context);
        void OnCome_on(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSquid(InputAction.CallbackContext context);
    }
    public interface ISettingActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
